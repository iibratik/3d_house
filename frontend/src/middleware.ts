import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { privateRoutes } from './app/routes';

const supportedLocales = ['ru', 'en'];
const defaultLocale = 'ru';

// üîí –ü—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤–æ —Ñ—Ä–æ–Ω—Ç
const blockedPaths = [
    '/api/backend',
    '/backend',
    '/swagger-ui',
    '/v3/api-docs',
];

// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –±–µ–∑ –ª–æ–∫–∞–ª–∏: /ru/dashboard ‚Üí /dashboard
function stripLocale(pathname: string): string {
    const segments = pathname.split('/');
    if (supportedLocales.includes(segments[1])) {
        return '/' + segments.slice(2).join('/');
    }
    return pathname;
}

function hasLocale(pathname: string): boolean {
    const firstSegment = pathname.split('/')[1];
    return supportedLocales.includes(firstSegment);
}

export function middleware(request: NextRequest) {
    const { pathname } = request.nextUrl;

    // üö´ –ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ backend-–∞–¥—Ä–µ—Å–∞
    if (blockedPaths.some((prefix) => pathname.startsWith(prefix))) {
        return new Response('Access Denied', { status: 403 });
    }

    // üö´ –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ API
    const isStatic = pathname.match(/^\/(_next|favicon.ico|api|3dModels|static|images|fonts)\b/);
    if (isStatic) return NextResponse.next();

    // üåê –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å, –µ—Å–ª–∏ –Ω–µ—Ç
    if (!hasLocale(pathname)) {
        const newUrl = request.nextUrl.clone();
        newUrl.pathname = `/${defaultLocale}${pathname}`;
        return NextResponse.redirect(newUrl);
    }

    // üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const pathWithoutLocale = stripLocale(pathname);
    const isPrivate = privateRoutes.some(route => pathWithoutLocale.startsWith(route));

    const token = request.cookies.get('authToken')?.value;

    if (isPrivate && !token) {
        const locale = pathname.split('/')[1] || defaultLocale;
        const loginUrl = new URL(`/${locale}/login`, request.url);
        loginUrl.searchParams.set('from', pathname);
        return NextResponse.redirect(loginUrl);
    }

    return NextResponse.next();
}

// ‚ùó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
export const config = {
    matcher: ['/((?!.*\\.).*)'], // –∏—Å–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã .js, .png –∏ —Ç.–ø.
};
